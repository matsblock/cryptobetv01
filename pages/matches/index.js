import Moralis from 'moralis'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../../styles/Home.module.css'
import { daiAbi, betContractAbi, sep03ContractAddress, requestId } from "../../constants"
import { Bignumebr, ethers } from "ethers"
import moment from 'moment'
import { Card, Illustration, Modal, Input, Radios } from '@web3uikit/core'
import React, { useEffect, useState } from "react";
// import Modal from '../../components/Modal'

import { getSession, signOut } from 'next-auth/react';
import { useContractRead, usePrepareContractWrite, useContractWrite } from 'wagmi'

export default function Home({ user, address, nativeBalance, _daiBalance, gameCreateArray }) {
  const [showModal, setShowModal] = useState(false);
  const [isVisible, setIsVisible] = useState(false);

  const formattedDaiBalance = ethers.utils.formatEther(_daiBalance.replaceAll('"', ''));

  const gameCreateList = gameCreateArray.map((gameCreate) =>
    <div key={gameCreate[0]}
      style={{
        width: '250px'
      }}
      className={styles.matchCard}
    >
      <Card
        description={moment.unix(gameCreate[1]).format('LLLL')}
        onClick={() => setIsVisible(true)}
        setIsSelected={function noRefCheck() { }}
        title={gameCreate[2] + " VS " + gameCreate[3]}
        tooltipText={<span style={{ width: 200 }}>'Lorem Ipsum Dole met sai souni lokomit anici trenicid'</span>}
      >
        <div>
          <Illustration
            height="180px"
            logo="servers"
            width="100%"
          />
        </div>
      </Card>
    </div>
  )


  return (

    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <button onClick={() => signOut({ redirect: '/signin' })}>Sign out</button>
            <h4>User session:</h4>
            <pre>{JSON.stringify(user, null, 2)}</pre>
            

      <main className={styles.main}>
        El saldo en ether de {address} es {nativeBalance} y en Dai es {formattedDaiBalance}

        <div className={styles.matchCards} >
          {
            gameCreateList
          }

          <Modal
            isVisible={isVisible}
            onCancel={function noRefCheck() { setIsVisible(false) }}
            onCloseButtonPressed={function noRefCheck() { setIsVisible(false) }}
            onOk={function noRefCheck() { }}
            title="Set your Bet"
          >
            <Radios
              id="radios"
              items={[
                'Home',
                'Tied',
                'Away',
              ]}
              onBlur={function noRefCheck() { }}
              onChange={function noRefCheck() { }}
              onCreditCardRemoved={function noRefCheck() { }}
              setWhichIsChecked={2}
              title=""
            />

            <Input
              label="Amount"
              name="Bet Amountt"
              onBlur={function noRefCheck() { }}
              onChange={function noRefCheck() { }}
              value={50}
              type="number"
            />
          </Modal>
        </div>




      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

export async function getServerSideProps(context) {
  console.log("running on server side!!!")

  const session = await getSession(context);
        console.log("server side!")

    // redirect if not authenticated
    if (!session) {
        return {
            redirect: {
                destination: '/signin',
                permanent: false,
            },
        };
    }

  await Moralis.start({ apiKey: process.env.MORALIS_API_KEY });
  const address = session.user.address;
  const nativeBalance = await Moralis.EvmApi.account.getNativeBalance({
    address,
    chain: 42,
  });


  const options = {
    chain: 42,
    address: "0x29282139fD1A88ccAED6d3bb7f547192144C0f95",
    functionName: "balanceOf",
    abi: daiAbi,
    params: { account: address},
  };

  const daiBalance = await Moralis.EvmApi.native.runContractFunction(options);
  const _daiBalance = JSON.stringify(daiBalance)


  const getGameCreateLengthOptions = {
    chain: 42,
    address: sep03ContractAddress,
    functionName: "getGameCreateStructLength",
    abi: betContractAbi,
    params: {
      _requestId: requestId,
    },
  };

  const gameCreateLength = await Moralis.EvmApi.utils.runContractFunction(getGameCreateLengthOptions)
  const _gameCreateLength = gameCreateLength.data;
  const gameCreateArray = [];

  for (var idx = 0; idx < _gameCreateLength; idx++) {
    let array = await pushGetGameCreateToAnArray(idx);
    array = array.replaceAll('"', '').replaceAll('[', '').replaceAll(']', '')
    array = array.split(',')
    gameCreateArray.push(array)
  }

  return {
    props: {  user: session.user , address, nativeBalance: nativeBalance.result.balance.ether, _daiBalance, gameCreateArray },
  };
}


const pushGetGameCreateToAnArray = async function (__idx) {
  const getGameCreateOptions = {
    chain: 42,
    address: sep03ContractAddress,
    functionName: "getGameCreate",
    abi: betContractAbi,
    params: {
      _requestId: requestId,
      _idx: String(__idx)
    },
  };

  const _gameCreate = await Moralis.EvmApi.utils.runContractFunction(getGameCreateOptions);
  const gameCreate = JSON.stringify(_gameCreate)
  return gameCreate;

}